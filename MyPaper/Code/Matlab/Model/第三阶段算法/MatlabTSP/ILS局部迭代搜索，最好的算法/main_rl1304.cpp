////////////////////////

//TSP问题 迭代局部搜索求解代码

//基于chn144例子求解

//作者：infinitor

//修改：2940563940@qq.com

//修改时间：2019-12-21

////////////////////////

#include <iostream>
#include <cmath>
#include <stdlib.h>
#include <time.h>
#include <vector>
#include <windows.h>
#include <memory.h>
#include <string.h>
#include <iomanip>
#include <fstream>

#define DEBUG

using namespace std;

#define CITY_SIZE 1304//城市数量

//城市坐标
typedef struct candidate
{

	int x;

	int y;

} city, CITIES;

//优化值

double **Delta;

//解决方案

typedef struct Solution
{
	int permutation[CITY_SIZE]; //城市排列
	double cost;				//该排列对应的总路线长度
} SOLUTION;

// 计算邻域操作优化值
double calc_delta(int i, int k, int *tmp, CITIES *cities);
//计算两个城市间距离
double distance_2city(city c1, city c2);
//根据产生的城市序列，计算旅游总距离
double cost_total(int *cities_permutation, CITIES *cities);
//获取随机城市排列, 用于产生初始解
void random_permutation(int *cities_permutation);

//颠倒数组中下标begin到end的元素位置, 用于two_opt邻域动作

void swap_element(int *p, int begin, int end);

//邻域动作 反转index_i <-> index_j 间的元素

void two_opt_swap(int *cities_permutation, int *new_cities_permutation, int index_i, int index_j);

//本地局部搜索，边界条件 max_no_improve

void local_search(SOLUTION &best, CITIES *cities, int max_no_improve);

//判断接受准则

bool AcceptanceCriterion(int *cities_permutation, int *new_cities_permutation, CITIES *p_cities);

//将城市序列分成4块，然后按块重新打乱顺序。

//用于扰动函数

void double_bridge_move(int *cities_permutation, int *new_cities_permutation, CITIES *cities);

//扰动

void perturbation(CITIES *cities, SOLUTION &best_solution, SOLUTION &current_solution);

//迭代搜索

void iterated_local_search(SOLUTION &best, CITIES *cities, int max_iterations, int max_no_improve);

// 更新Delta

void Update(int i, int k, int *tmp, CITIES *cities);

//城市排列

int permutation[CITY_SIZE];

//城市坐标数组

CITIES cities[CITY_SIZE];

//berlin52城市坐标，最优解7542好像

CITIES berlin52[CITY_SIZE] = {{15440,8888},{15440,9328},{15440,9768},{15440,11264},{15440,13288},{15440,14058},{15536,8228},{15616,8228},{15824,8228},{16048,8228},{16176,8228},{16384,8228},{16512,8228},{16624,8228},{16704,8228},{16784,8228},{16880,8228},{17024,8228},{17312,8228},{17440,8228},{17600,8228},{17872,8228},{17936,4400},{6320,10626},{6320,12012},{6432,9680},{6480,4180},{6480,4796},{6480,5544},{6480,6732},{1232,5918},{1232,7304},{1232,12012},{1232,14432},{1456,5588},{1520,4730},{4272,11154},{4272,11858},{4304,10296},{4416,10296},{4496,10296},{4528,5544},{4528,7040},{4592,10296},{4704,10296},{4784,10296},{4880,10296},{4944,10296},{5120,10296},{5200,10296},
{5360,10296},{5504,10296},{5616,10296},{5648,7942},{5648,9020},{5680,6952},{5808,6952},{5952,6952},{6096,6952},{6160,6952},{6240,6952},{5648,14322},{6288,4180},{6288,4796},{6288,5544},{6288,8052},{6688,9020},{6800,9020},{6912,9020},{7072,9020},{7120,5280},{7120,6732},{7120,7172},{7120,7942},{18432,4422},{18720,4422},{18912,4422},{19040,4422},{14128,5610},{14128,7480},{14128,8888},{14128,9328},{14320,9548},{14464,9548},{14608,9548},{14672,9548},{14736,9548},{14800,9548},{14896,9548},{15024,9548},{15280,9768},{15280,11264},{15280,13288},{15280,14058},{3504,9240},{3504,10142},{3504,12012},{3648,9020},{3760,9020},{3872,9020},
{4096,9020},{4304,9020},{4784,9020},{4880,9020},{4960,9020},{5136,9020},{5216,9020},{5344,9020},{5776,9020},{5808,4488},{5808,5544},{5808,8052},{784,4400},{784,5500},{816,6776},{912,6776},{1056,7524},{1104,12012},{1104,14432},{9104,10472},{9104,11704},{9104,12540},{9104,13508},{9104,14058},{9216,9548},{9296,9548},{9456,9548},{9568,9548},{9664,9548},{9776,9548},{9840,9548},{9904,9548},{10080,9548},{10336,9548},{10448,9548},{10544,9548},{10640,9548},{10768,9548},{10864,9548},{10960,9548},{11088,9548},{11168,9548},{11344,9548},{11568,9548},{11696,9548},{11792,9548},{11824,5324},{11824,6512},{11824,7172},{11824,7612},
{11824,8492},{10768,11484},{10768,12540},{10768,13068},{10768,13970},{11024,8932},{11088,8932},{11184,8932},{11280,8932},{11584,8932},{11760,5324},{11760,6512},{11760,7172},{11760,7612},{11760,8382},{10064,11704},{10064,12540},{10064,13068},{10064,13508},{10064,14190},{10128,11484},{10192,11484},{10336,11484},{10448,11484},{10640,11484},{10864,11484},{10960,11484},{11024,11484},{11088,5324},{11088,6842},{9072,8976},{10480,8492},{10544,8492},{10640,8492},{10736,8492},{11216,8492},{11280,8492},{11408,8492},{11536,8492},{11936,8492},{12064,8492},{12112,5104},{12112,5764},{12112,6512},{12112,7172},{12112,7612},{8688,11594},{8688,12540},{8688,13508},{8688,14058},
{8720,10956},{8800,10956},{8944,10956},{9488,10956},{9712,10956},{9904,10956},{9968,10956},{10112,10956},{10192,10956},{10544,10956},{10640,10956},{11600,10956},{11728,10956},{11968,10956},{12048,9284},{12048,10362},{12192,10736},{12288,10736},{12368,10736},{12400,4796},{12400,5874},{12400,6512},{12400,7172},{12400,7612},{12400,8272},{8528,10362},{8528,11594},{8528,12540},{8528,13508},{8528,14058},{8560,9988},{8720,9988},{8800,9988},{12336,4796},{12336,6512},{12336,7172},{12336,7612},{12336,8272},{8464,10516},{8464,11594},{8464,12540},{8560,5170},{8560,6732},{8560,7282},{8560,7832},{8560,8866},{7216,9350},{7216,9988},{7216,10516},{7216,11374},
{7216,12430},{7216,14432},{7408,8932},{7504,8932},{7568,8932},{7664,8932},{7728,8932},{7760,4906},{7760,5544},{7760,6732},{7760,7172},{7760,7722},{12560,10516},{12560,11264},{12560,11814},{12560,13288},{12560,14058},{12640,9768},{12752,9768},{12848,9768},{13056,9768},{13152,9768},{13232,9768},{13328,9768},{13392,9768},{13584,9768},{13696,9768},{13808,9768},{14032,9768},{13680,8888},{13680,9328},{13680,10516},{13680,11264},{13680,11814},{13680,13288},{13680,14058},{13712,7480},{13808,7480},{14064,7480},{14320,7480},{14448,7480},{14512,7480},{14608,7480},{14672,7480},{14736,7480},{14800,7480},{14896,7480},{15024,7480},{15408,7480},{15536,7480},
{15616,7480},{15824,7480},{16048,7480},{16176,7480},{16384,7480},{16512,7480},{16672,7480},{16768,7480},{17072,7480},{17168,7480},{17312,7480},{17440,7480},{17536,7480},{18128,7480},{17712,10626},{17712,14058},{17968,8448},{18112,8448},{12784,10406},{12784,11264},{12784,11814},{12784,13288},{12784,14058},{14192,9988},{14896,4906},{14896,5874},{14896,8888},{13712,5390},{4208,4290},{4208,7040},{4208,8052},{4592,11264},{4704,11264},{4784,11264},{5792,11264},{5968,11264},{6080,11264},{6224,11264},{6528,11264},{6608,11264},{6800,11264},{6912,11264},{6992,11264},{7056,11264},{7136,11264},{7376,11264},{7440,11264},{7568,11264},{7712,11264},{7792,11264},
{7856,11264},{7920,11264},{8000,11264},{8112,11264},{8272,11264},{8368,11264},{8400,12540},{8400,14058},{10480,4796},{10544,5104},{10640,5104},{10752,5104},{10832,5104},{10912,5104},{11008,5104},{11200,5104},{11280,5104},{11408,5104},{12304,11814},{12304,13288},{12304,14058},{12656,4906},{12656,5874},{12656,7172},{12656,7612},{12656,8272},{12656,8888},{14864,11264},{14864,13288},{14864,14058},{15024,4906},{15024,5874},{15024,8888},{4592,7612},{4656,7612},{4768,7612},{4880,7612},{4976,7612},{5056,7612},{5488,7612},{5952,7612},{6096,7612},{6160,7612},{6560,7612},{7664,7612},{7792,9350},{7792,9988},{7792,10516},{7792,12430},{7792,14168},
{16496,4906},{16496,9922},{16624,10736},{16704,10736},{16784,10736},{16880,10736},{16944,10736},{17008,10736},{17104,10736},{17296,10736},{17424,10736},{17616,10736},{17952,10736},{18080,10736},{18208,10736},{18368,10736},{18416,11176},{18416,14168},{1264,4620},{16400,4906},{17904,14058},{3984,4180},{3984,7150},{3984,10076},{8272,12540},{8272,14058},{16336,10296},{16336,11264},{16336,13288},{16976,5126},{1008,4840},{5808,9768},{5808,12320},{5808,14322},{5936,4488},{5936,5544},{4432,11858},{4656,4180},{4656,5544},{4656,7040},{4656,8162},{16848,13288},{17296,11484},{17424,11484},{18208,11484},{18384,7700},{18384,8668},{8240,10516},{8400,9460},{8432,5170},
{8432,6732},{8432,7282},{8432,7832},{1584,12012},{1584,13992},{1584,14432},{1616,6556},{1680,5214},{2576,4290},{2576,5170},{2672,9768},{2672,10296},{2672,12012},{2672,13772},{2672,14212},{17008,13288},{880,5390},{880,12012},{1104,5060},{5520,12210},{5520,14322},{5680,4796},{5680,5544},{3888,7150},{3888,8052},{16592,13288},{18096,9768},{8016,10516},{8016,12430},{8016,14058},{8144,5170},{8144,6732},{8144,7172},{8144,7832},{8144,8866},{16784,5236},{16784,13288},{17072,5016},{17168,5016},{17312,5016},{17440,5016},{17536,5016},{17664,5016},{17776,5016},{784,12012},{1104,5808},{7728,10516},{7728,12430},{7728,14168},{7920,4906},
{7920,5544},{7920,6732},{7920,7172},{7920,7832},{7920,8602},{7920,9350},{5232,12430},{5232,14322},{5520,4796},{5520,5544},{5520,6732},{3856,12012},{4720,11858},{4976,5544},{4976,7040},{4976,8162},{18496,7700},{7376,9878},{7376,10516},{7376,12430},{7376,14300},{7504,4796},{7504,5390},{7504,6732},{7504,7172},{1808,12012},{1808,13882},{1808,14432},{1840,10296},{1920,10296},{1968,5170},{12528,5874},{12528,6512},{12528,7172},{12528,7612},{12528,8272},{12752,8888},{12848,11264},{12848,11814},{12848,13288},{12848,14058},{13056,8888},{13136,8888},{13328,8888},{13392,8888},{13456,8888},{13584,8888},{13808,8888},{14064,8888},{14320,8888},
{14448,8888},{14512,8888},{14608,8888},{14672,8888},{14736,8888},{14800,8888},{15536,8888},{15616,8888},{15824,8888},{16048,8888},{16176,8888},{16304,8888},{17088,9988},{17296,9988},{17456,9988},{1680,12012},{1776,6864},{1808,4840},{5936,12320},{5936,14322},{6160,4180},{6160,4796},{6160,5544},{6160,9240},{6160,9988},{18512,8668},{18512,9768},{18512,10428},{10320,5170},{11280,5852},{11408,5852},{11552,5852},{11600,12540},{11600,13068},{11600,13838},{4880,14432},{4944,14432},{5040,14432},{5120,14432},{5392,14432},{6064,14432},{6160,14432},{6224,9988},{6224,12012},{6256,9460},{6384,4180},{6384,4796},{6384,5544},{6384,6732},{6384,7172},
{1936,12012},{1936,13882},{1936,14432},{2064,5720},{6672,4796},{6672,5544},{6672,6732},{6896,12540},{6992,12540},{7056,12540},{7136,12540},{7440,12540},{7568,12540},{7856,12540},{7920,12540},{8128,12540},{8800,12540},{8880,12540},{8944,12540},{9216,12540},{9296,12540},{9488,12540},{9552,12540},{9632,12540},{9712,12540},{9776,12540},{9936,12540},{10128,12540},{10192,12540},{10336,12540},{10448,12540},{10544,12540},{10864,12540},{10960,12540},{11024,12540},{11168,12540},{11280,12540},{11376,12540},{11440,12540},{11728,12540},{11808,12540},{11952,12540},{11984,6512},{11984,7172},{11984,7612},{11984,9284},{11984,11704},{12080,12540},{12224,12540},{12464,9438},
{8784,11594},{8784,13508},{8784,14058},{8848,9460},{8976,5170},{8976,6732},{8976,7282},{8976,7832},{8976,8976},{3280,4180},{3280,5170},{3280,7040},{3280,7832},{3344,8052},{3408,8052},{3536,8052},{3648,8052},{4400,8052},{4768,8052},{4880,8052},{5040,8052},{7568,10516},{7568,14168},{10544,13068},{10544,13508},{10544,14190},{10640,7612},{7824,4906},{7824,5544},{7824,6732},{7824,7172},{7920,10516},{7920,14058},{10608,14190},{10864,13728},{10960,13728},{11024,13728},{11168,13728},{11280,13728},{11376,13728},{11440,13728},{11776,13728},{11952,13728},{12048,11704},{9520,14432},{9632,14432},{9712,14432},{9776,14432},{9936,14432},{10128,14432},
{10192,14432},{10336,14432},{10448,14432},{11440,13068},{11472,7612},{11536,7612},{12592,7612},{12768,7612},{13056,7612},{13136,5016},{13136,5874},{13136,7172},{6000,9240},{6160,11704},{6432,11704},{6512,11704},{8880,11704},{8944,11704},{9216,11704},{9296,11704},{9488,11704},{9552,11704},{9632,11704},{9712,11704},{9776,11704},{9936,11704},{10352,13068},{10352,13508},{10544,7612},{656,4290},{656,14212},{16304,9328},{17648,4400},{6608,14432},{208,4422},{10864,13068},{11024,7172},{11184,7172},{11280,7172},{11376,7172},{12592,7172},{12768,7172},{13056,7172},{13232,7172},{13328,7172},{13392,7172},{13456,7172},{13584,7172},{9520,13508},{9552,13068},
{9632,13068},{9712,13068},{9776,13068},{9936,13068},{10128,13068},{10192,13068},{10448,13068},{10960,13068},{11024,13068},{11168,13068},{11280,13068},{11376,13068},{11728,13068},{12096,13068},{12384,11924},{12480,11924},{12720,11924},{13072,11924},{13152,11924},{13232,11924},{13296,11924},{13392,11924},{13584,11924},{13808,4796},{13808,5610},{13808,9328},{13808,10516},{13808,11264},{13808,11704},{3120,4180},{3120,5170},{3120,7040},{3120,7832},{3120,8272},{3184,8492},{3248,8492},{3280,9350},{3280,10076},{3280,10516},{3280,12012},{3280,14212},{11376,6402},{3152,9240},{3152,10098},{3152,12012},{3152,14212},{1392,7304},{1392,12012},{1392,13992},{1392,14432},
{1424,6336},{1520,6336},{464,13992},{528,14212},{7664,5390},{7664,6732},{7664,7172},{5360,4796},{5360,5544},{5360,7040},{5360,9658},{5392,12100},{10032,6732},{10192,5170},{10192,6292},{3184,7040},{3344,7040},{3408,7040},{3536,7040},{3648,7040},{3744,7040},{4080,7040},{4592,7040},{4768,7040},{4880,7040},{5056,7040},{5136,7040},{5216,7040},{9936,13508},{10096,5170},{1328,12012},{1504,12012},{2144,12012},{2224,12012},{2384,12012},{2480,12012},{2544,12012},{2816,12012},{2976,12012},{3088,12012},{3360,12012},{3440,12012},{3664,12012},{3744,12012},{4016,12012},{4592,12012},{4784,12012},{4880,12012},{6992,10516},{7056,14432},
{7136,14432},{7312,14432},{9232,13508},{9232,14058},{9296,8052},{9328,5170},{9328,6732},{4880,5544},{4048,4180},{8304,10516},{9776,13508},{12592,8272},{12752,8272},{12784,4906},{12784,5874},{7056,10516},{14320,4796},{14320,5236},{14320,5874},{14512,11264},{14512,13288},{14512,14058},{14704,11264},{14704,13288},{14704,14058},{14736,4906},{14736,5874},{2928,4290},{2928,5060},{3184,7832},{4592,4180},{4592,5544},{13072,5016},{13072,5874},{13072,10516},{13072,11264},{13072,13288},{13072,14058},{10480,6842},{10480,7612},{10480,13508},{11200,6512},{11280,6512},{11536,6512},{12592,6512},{6896,5170},{6896,6732},{7120,9988},{7120,10516},{3408,4180},
{3408,5280},{3408,8712},{3408,9240},{3408,9922},{3728,10516},{7408,4796},{7408,5390},{7408,6732},{7408,7172},{3568,5280},{2896,8272},{2896,9240},{2976,10076},{4752,4180},{4752,5544},{12720,10406},{12720,11264},{12720,13288},{12720,14058},{2800,9768},{2800,10296},{2800,13772},{2800,14212},{2832,4290},{2832,5060},{2832,8272},{2832,9240},{8112,10516},{8112,14058},{8208,7832},{8208,8866},{1328,7304},{1328,13992},{1328,14432},{12464,11044},{12496,13288},{12496,14058},{9296,13508},{9296,14058},{9456,7612},{9584,7612},{9680,7612},{9744,7612},{9856,7612},{10336,7612},{10416,7612},{10752,7612},{5072,5544},{6512,14432},{7440,10516},
{7440,14168},{12368,13288},{12368,14058},{13456,9328},{13584,9328},{14064,9328},{15536,9328},{15616,9328},{15824,9328},{16048,9328},{16176,9328},{14512,4906},{14512,5874},{17520,4290},{14032,11704},{14192,10516},{14192,11264},{12080,14058},{12496,10516},{16656,4796},{13232,10516},{13232,11264},{13232,13288},{13232,14058},{13456,5390},{10192,13508},{14320,10516},{14320,11264},{14320,13288},{14320,14058},{14448,4906},{14448,5874},{14768,11264},{14768,13288},{14768,14058},{14800,5874},{9872,5170},{9872,6732},{10128,13508},{16496,11264},{16496,13288},{15376,9768},{15376,11264},{15376,13288},{15376,14058},{15408,6138},{6096,4796},{6096,5544},{6096,9240},{6672,12320},
{6672,14432},{7248,4796},{7248,5390},{7248,6732},{7248,7172},{8880,14168},{8944,14168},{13152,14168},{13296,14168},{13392,14168},{13584,14168},{14032,14168},{14608,14168},{15520,14168},{15648,14168},{15760,14168},{15824,14168},{15920,14168},{15664,9768},{15664,11264},{15664,13288},{16144,6358},{14608,4906},{14608,5874},{15504,9768},{16192,9768},{5328,12320},{6064,12320},{9616,13508},{9680,5170},{9680,6732},{8368,10516},{10416,6292},{4336,4620},{5136,5544},{5216,5544},{5600,5544},{6560,5544},{6784,5544},{8848,5544},{9456,5544},{9584,5544},{9744,5544},{9968,5544},{13168,10516},{13168,11264},{13168,13288},{3344,10516},{3344,14212},{6544,4180},
{6576,4796},{6576,6732},{6736,14432},{8720,8976},{8944,13508},{9456,6732},{3632,5280},{15536,11264},{15536,13288},{15600,6138},{6448,14432},{1504,14432},{2000,14432},{2128,14432},{2224,10604},{2256,4840},{2256,6160},{2256,9768},{5600,6732},{6784,6732},{8848,6732},{9200,6732},{9584,6732},{9744,6732},{13584,5456},{14064,5456},{14960,4796},{15248,4796},{15536,6204},{15824,6204},{16048,6204},{16208,4796},{16304,4796},{16592,4796},{16752,4796},{12880,4906},{13232,5236},{13296,4906},{15248,5874},{16176,10296},{16176,11264},{16176,13288},{16208,6512},{13296,11264},{13392,11264},{13584,11264},{14032,11264},{14608,11264},{15760,11264},{15824,11264},
{15920,11264},{16032,11264},{2384,6160},{2384,9768},{2384,10296},{2384,13992},{2224,13772},{2480,13772},{2544,13772},{2960,14212},{3088,9240},{1504,13992},{2544,9768},{2544,10296},{2544,14212},{2672,4290},{2672,5060},{8848,7282},{8848,7832},{3088,14212},{3344,5170},{3184,4180},{3184,5170},{2352,4730},{8880,13508},{13296,10516},{13296,13288},{13328,5874},{17232,14168},{17312,14168},{17424,14168},{18080,14168},{18160,14168},{18240,14168},{18336,14168},{18640,14168},{13392,13288},{13584,13288},{14032,13288},{14608,13288},{15760,13288},{15824,13288},{15920,13288},{16032,13288},{16704,13288},{16944,13288},{17072,13288},{17232,13288},{17264,4290},{15920,10296},
{16064,10296},{9712,13508},{17328,8976},{17968,9768},{18192,9768},{18704,9768},{18928,8668},{13232,5874},{14032,10516},{13584,10516},{14672,5874},{13392,5874},{13392,10516},{5600,4796},{17440,4400},{1888,5500},{2128,6160},{2128,9768},{2064,6160},{2480,9768},{2480,10296},{2160,4840},{2064,9768},{3744,5280},{18640,10428},{18704,8668},{15696,5764},{9200,7392},{15824,5764},{8016,4906},{9040,4796},{9104,4796},{18192,8668},{19024,8668},{9200,7832},{6320,9020},{18224,4213},{14944,10208},{1024,5808},{5872,9328},{2624,5808},{8080,9460},{4848,14520},{6224,14520},{6800,13750},{6800,12694},{10592,11704},{12016,12848},{9360,14520},{11440,14520},
{6624,9680},{6048,4400},{304,4213},{688,14410},{7632,9680},{560,4092},{752,4092},{6992,14520},{7408,14520},{8352,9680},{14720,10208},{12736,9988},{2816,9460},{8160,9680},{12608,8492},{11664,9768},{14496,9108},{608,4708},{12480,10736},{16640,7700},{14384,10208},{7712,9680},{14784,10208},{16512,11044},{15392,9548},{5712,4092},{5840,4092},{6096,4092},{6688,11924},{15952,14256},{4560,4092},{4784,4092},{8416,9900},{6128,4092},{6576,4092},{15568,9988},{944,14520},{2160,14520},{15984,14146},{14224,4708},{14832,4708},{14992,4708},{15376,4708},{16176,4708},{16176,5478},{16560,4708},{16720,4708},{16848,4708},{12944,5236},{14352,5104},
{16304,5742},{2448,5500},{3024,9460},{8832,9680},{10992,9152},{3376,14410},{13312,10208},{17136,14256},{17264,13596},{13184,7920},{16736,7700},{15968,9988},{15520,9548},{205,13992},{16032,10516},{16064,10824},{14048,9548},{14640,10208},{5232,4224},{5232,4642},{6992,4708},{12304,4224},{12304,4620},{13904,4708},{336,4213},{336,4598},{3792,4466},{3792,5104},{880,4092},{2224,4092},{2608,4092},{3440,4092},{17888,8888},{11232,9152},{18144,9988},{15856,5016},{15856,5588},{7152,4708},{7152,4884},{7280,4708},{7296,4796},{7312,4708},{7568,4708},{8624,4708},{8912,4708},{9232,4708},{9520,4708},{10576,4708},{10864,4708},{7696,5104},
{9072,5016},{9184,5016},{10992,4708},{11120.000000,4708.000000}};


int main()

{
    time_t start, end;
    double cost;
    time(&start);
    
	
    srand(1);

	int max_iterations = 1000;

	int max_no_improve = 50;

	//初始化指针数组

	Delta = new double *[CITY_SIZE];

	for (int i = 0; i < CITY_SIZE; i++)

		Delta[i] = new double[CITY_SIZE];

	SOLUTION best_solution;

	iterated_local_search(best_solution, berlin52, max_iterations, max_no_improve);

    ofstream file;
    file.open("opt_rl1304.txt", ios::app); //打开文件用于记录迭代过程，第一列是最优解，第二列是当前解，，分割
	file << endl
		 << endl
		 << "搜索完成！最优路线总长度 = " << best_solution.cost << endl;
    cout << endl
		 << endl
		 << "搜索完成！最优路线总长度 = " << best_solution.cost << endl;
	file << "最优访问城市序列如下：" << endl;

	for (int i = 0; i < CITY_SIZE; i++)

	{

		file << setw(4) << setiosflags(ios::left) << best_solution.permutation[i];
	}
    time(&end);
    cost=difftime(end,start);
    file << "用时 " << cost << "秒" << endl;
    cout << "用时 " << cost << "秒" ;
	cout << endl
		 << endl;

	return 0;

}

//计算两个城市间距离

double distance_2city(city c1, city c2)

{

	double distance = 0;

	distance = sqrt((double)((c1.x - c2.x) * (c1.x - c2.x) + (c1.y - c2.y) * (c1.y - c2.y)));

	return distance;
}

//根据产生的城市序列，计算旅游总距离

//所谓城市序列，就是城市先后访问的顺序，比如可以先访问ABC，也可以先访问BAC等等

//访问顺序不同，那么总路线长度也是不同的

//p_perm 城市序列参数

double cost_total(int *cities_permutation, CITIES *cities)

{

	double total_distance = 0;

	int c1, c2;

	//逛一圈，看看最后的总距离是多少

	for (int i = 0; i < CITY_SIZE; i++)

	{

		c1 = cities_permutation[i];

		if (i == CITY_SIZE - 1) //最后一个城市和第一个城市计算距离

		{

			c2 = cities_permutation[0];
		}

		else

		{

			c2 = cities_permutation[i + 1];
		}

		total_distance += distance_2city(cities[c1], cities[c2]);
	}

	return total_distance;
}

//获取随机城市排列

void random_permutation(int *cities_permutation)

{

	int n = CITY_SIZE;

	int temp[CITY_SIZE];

	for (int i = 0; i < CITY_SIZE; i++)

		temp[i] = i;

	for (int i = 0; i < CITY_SIZE - 1; i++)

	{

		int r = rand() % n;

		cities_permutation[i] = temp[r];

		temp[r] = temp[n - 1];

		n--;
	}

	cities_permutation[CITY_SIZE - 1] = temp[0];
}

//颠倒数组中下标begin到end的元素位置

void swap_element(int *p, int begin, int end)

{

	int temp;

	while (begin < end)

	{

		temp = p[begin];

		p[begin] = p[end];

		p[end] = temp;

		begin++;

		end--;
	}
}

//邻域动作 反转index_i <-> index_j 间的元素

void two_opt_swap(int *cities_permutation, int *new_cities_permutation, int index_i, int index_j)

{

	for (int i = 0; i < CITY_SIZE; i++)

	{

		new_cities_permutation[i] = cities_permutation[i];
	}

	swap_element(new_cities_permutation, index_i, index_j);
}

double calc_delta(int i, int k, int *tmp, CITIES *cities)

{

	/*

	

                以下计算说明：

                对于每个方案，翻转以后没必要再次重新计算总距离

                只需要在翻转的头尾做个小小处理



                比如：

                有城市序列   1-2-3-4-5 总距离 = d12 + d23 + d34 + d45 + d51 = A

                翻转后的序列 1-4-3-2-5 总距离 = d14 + d43 + d32 + d25 + d51 = B

                由于 dij 与 dji是一样的，所以B也可以表示成 B = A - d12 - d45 + d14 + d25

                下面的优化就是基于这种原理

    */

	double delta = 0;

	if ((i == 0) && (k == CITY_SIZE - 1))

		delta = 0;

	else

	{

		int i2 = (i - 1 + CITY_SIZE) % CITY_SIZE;

		int k2 = (k + 1) % CITY_SIZE;

		delta = 0

				- distance_2city(cities[tmp[i2]], cities[tmp[i]])

				+ distance_2city(cities[tmp[i2]], cities[tmp[k]])

				- distance_2city(cities[tmp[k]], cities[tmp[k2]])

				+ distance_2city(cities[tmp[i]], cities[tmp[k2]]);
	}

	return delta;
}

/*

	去重处理，对于Delta数组来说，对于城市序列1-2-3-4-5-6-7-8-9-10，如果对3-5应用了邻域操作2-opt ， 事实上对于

	7-10之间的翻转是不需要重复计算的。所以用Delta提前预处理一下。

	

	当然由于这里的计算本身是O（1） 的，事实上并没有带来时间复杂度的减少（更新操作反而增加了复杂度） 

	如果delta计算 是O（n）的，这种去重操作效果是明显的。 

*/

void Update(int i, int k, int *tmp, CITIES *cities)
{

	if (i && k != CITY_SIZE - 1)
	{

		i--;
		k++;

		for (int j = i; j <= k; j++)
		{

			for (int l = j + 1; l < CITY_SIZE; l++)
			{

				Delta[j][l] = calc_delta(j, l, tmp, cities);
			}
		}

		for (int j = 0; j < k; j++)
		{

			for (int l = i; l <= k; l++)
			{

				if (j >= l)
					continue;

				Delta[j][l] = calc_delta(j, l, tmp, cities);
			}
		}

	} // 如果不是边界，更新(i-1, k + 1)之间的

	else
	{

		for (i = 0; i < CITY_SIZE - 1; i++)

		{

			for (k = i + 1; k < CITY_SIZE; k++)

			{

				Delta[i][k] = calc_delta(i, k, tmp, cities);
			}
		}

	} // 边界要特殊更新
}

//本地局部搜索，边界条件 max_no_improve

//best_solution最优解

//current_solution当前解

void local_search(SOLUTION &best_solution, CITIES *cities, int max_no_improve)

{

	int count = 0;

	int i, k;

	double inital_cost = best_solution.cost; //初始花费

	double now_cost = 0;

	SOLUTION *current_solution = new SOLUTION; //为了防止爆栈……直接new了，你懂的

	for (i = 0; i < CITY_SIZE - 1; i++)

	{

		for (k = i + 1; k < CITY_SIZE; k++)

		{

			Delta[i][k] = calc_delta(i, k, best_solution.permutation, cities);
		}
	}

	do

	{

		//枚举排列

		for (i = 0; i < CITY_SIZE - 1; i++)

		{

			for (k = i + 1; k < CITY_SIZE; k++)

			{

				//邻域动作

				two_opt_swap(best_solution.permutation, current_solution->permutation, i, k);

				now_cost = inital_cost + Delta[i][k];

				current_solution->cost = now_cost;

				if (current_solution->cost < best_solution.cost)

				{

					count = 0; //better cost found, so reset

					for (int j = 0; j < CITY_SIZE; j++)

					{

						best_solution.permutation[j] = current_solution->permutation[j];
					}

					best_solution.cost = current_solution->cost;

					inital_cost = best_solution.cost;

					Update(i, k, best_solution.permutation, cities);
				}
			}
		}

		count++;

	} while (count <= max_no_improve);
}

//判断接受准则

bool AcceptanceCriterion(int *cities_permutation, int *new_cities_permutation, CITIES *cities)

{

	int AcceptLimite = 500;

	int c1 = cost_total(cities_permutation, cities);

	int c2 = cost_total(new_cities_permutation, cities) - 500;

	if (c1 < c2)

		return false;

	else

		return true;
}

//将城市序列分成4块，然后按块重新打乱顺序。

//用于扰动函数

void double_bridge_move(int *cities_permutation, int *new_cities_permutation, CITIES *cities)

{

	/*对这一段函数，我们提出修改。因为实际上按原代码的方法并不能将

	 第一大块有效的扰动。同时，固定的扰动方法在第二次扰动后会大致恢

	 复原来的情形，只有少部分改变。我们提出一种将位置标签pos放入数组，

	 再进行随记排序来扰动的方案。同时去掉vector，这太傻了。

	 再补充一下，我认为除3比除4更好。

	 顺便修改了一下acceptance。*/

	int pos[5];

	pos[0] = 0;

	pos[1] = rand() % (CITY_SIZE / 3) + 1;

	pos[2] = rand() % (CITY_SIZE / 3) + CITY_SIZE / 3;

	pos[3] = rand() % (CITY_SIZE / 3) + (CITY_SIZE / 3) * 2;

	pos[4] = CITY_SIZE;

	int n = 4;

	int random_order[4], temp[4];

	for (int i = 0; i < 4; i++)

		temp[i] = i;

	for (int i = 0; i < 3; i++)

	{

		int r = rand() % n;

		random_order[i] = temp[r];

		temp[r] = temp[n - 1];

		n--;
	}

	random_order[3] = temp[0];

	int deadprotect = 0;

	do

	{

		int i = 0;

		for (int j = pos[random_order[0]]; j < pos[random_order[0] + 1]; j++)

		{

			new_cities_permutation[i] = cities_permutation[j];

			i++;
		}

		for (int j = pos[random_order[1]]; j < pos[random_order[1] + 1]; j++)

		{

			new_cities_permutation[i] = cities_permutation[j];

			i++;
		}

		for (int j = pos[random_order[2]]; j < pos[random_order[2] + 1]; j++)

		{

			new_cities_permutation[i] = cities_permutation[j];

			i++;
		}

		for (int j = pos[random_order[3]]; j < pos[random_order[3] + 1]; j++)

		{

			new_cities_permutation[i] = cities_permutation[j];

			i++;
		}

		deadprotect++;

		//cout<<deadprotect;

		//cout<<endl;

		if (deadprotect == 5)
			break;

	} while (AcceptanceCriterion(cities_permutation, new_cities_permutation, cities));
}

//扰动

void perturbation(CITIES *cities, SOLUTION &best_solution, SOLUTION &current_solution)

{

	double_bridge_move(best_solution.permutation, current_solution.permutation, berlin52);

	current_solution.cost = cost_total(current_solution.permutation, cities);
}

//迭代搜索

//max_iterations用于迭代搜索次数

//max_no_improve用于局部搜索边界条件

void iterated_local_search(SOLUTION &best_solution, CITIES *cities, int max_iterations, int max_no_improve)

{
    ofstream file;
    file.open("opt_rl1304.txt"); //打开文件用于记录迭代过程，第一列是最优解，第二列是当前解，，分割

	SOLUTION *current_solution = new SOLUTION;

	//获得初始随机解

	random_permutation(best_solution.permutation);

	best_solution.cost = cost_total(best_solution.permutation, cities);

	local_search(best_solution, cities, max_no_improve); //初始搜索

	for (int i = 0; i < max_iterations; i++)

	{

		perturbation(cities, best_solution, *current_solution); //扰动+判断是否接受新解

		local_search(*current_solution, cities, max_no_improve); //继续局部搜索

		//找到更优解

		if (current_solution->cost < best_solution.cost)

		{

			for (int j = 0; j < CITY_SIZE; j++)

			{

				best_solution.permutation[j] = current_solution->permutation[j];
			}

			best_solution.cost = current_solution->cost;
		}
        
        file << best_solution.cost << ',' << current_solution->cost << endl; //记录搜索过程

		// cout << setw(13) << setiosflags(ios::left) << "迭代搜索 " << i << " 次\t"
		// 	 << "最优解 = " << best_solution.cost << " 当前解 = " << current_solution->cost << endl;
	}
    file.close();
}